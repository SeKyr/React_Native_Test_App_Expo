{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport NInput from \"./NInput\";\nimport { useEffect, useState } from \"react\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function UIView() {\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    n = _useState2[0],\n    setN = _useState2[1];\n  var squaresWidth;\n  var squaresHeight;\n  var setDimensions = function setDimensions(layout) {\n    var x = layout.x,\n      y = layout.y,\n      width = layout.width,\n      height = layout.height;\n    console.log(width, height);\n    squaresWidth = width;\n    squaresHeight = height;\n  };\n  var onStart = function onStart(n) {\n    setN(n);\n  };\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    onLayout: function onLayout(event) {\n      setDimensions(event.nativeEvent.layout);\n    },\n    children: n > 0 ? _jsx(RotatingSquares, {\n      n: n,\n      width: squaresWidth,\n      height: squaresHeight\n    }) : _jsx(NInput, {\n      onStart: onStart\n    })\n  });\n}\nfunction RotatingSquares(_ref) {\n  var n = _ref.n,\n    width = _ref.width,\n    height = _ref.height;\n  var sizePerSquare = width * height / n;\n  var squareSideLength = Math.sqrt(sizePerSquare);\n  var smallestSideLength = Math.min(height, width);\n  if (smallestSideLength > squareSideLength) {\n    smallestSideLength = smallestSideLength / Math.ceil(smallestSideLength / squareSideLength);\n  }\n  squareSideLength = smallestSideLength;\n  var rows = Math.ceil(height / squareSideLength);\n  var columns = Math.ceil(width / squareSideLength);\n  console.log(n, width, height);\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      width: width,\n      height: height\n    },\n    children: _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexDirection: \"row\"\n      },\n      children: Array.from({\n        length: columns\n      }, function () {\n        return _jsx(View, {\n          children: Array.from({\n            length: rows\n          }, function () {\n            if (n > 0) {\n              n--;\n              return _jsx(RotatingSquare, {\n                length: squareSideLength\n              });\n            } else {\n              return _jsx(View, {\n                style: {\n                  width: squareSideLength,\n                  height: squareSideLength\n                }\n              });\n            }\n          })\n        });\n      })\n    })\n  });\n}\nfunction RotatingSquare(_ref2) {\n  var length = _ref2.length;\n  var rotationValue = new Animated.Value(0);\n  useEffect(function () {\n    startRotation();\n  }, []);\n  var startRotation = function startRotation() {\n    Animated.loop(Animated.timing(rotationValue, {\n      toValue: 1,\n      duration: 2000,\n      easing: Easing.linear,\n      useNativeDriver: true\n    })).start();\n  };\n  var interpolatedRotation = rotationValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '360deg']\n  });\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    children: _jsx(Animated.View, {\n      style: {\n        width: length,\n        height: length,\n        backgroundColor: 'blue',\n        transform: [{\n          rotate: interpolatedRotation\n        }]\n      }\n    })\n  });\n}\n;","map":{"version":3,"names":["NInput","useEffect","useState","Animated","Easing","View","jsx","_jsx","UIView","_useState","_useState2","_slicedToArray","n","setN","squaresWidth","squaresHeight","setDimensions","layout","x","y","width","height","console","log","onStart","style","flex","justifyContent","alignItems","onLayout","event","nativeEvent","children","RotatingSquares","_ref","sizePerSquare","squareSideLength","Math","sqrt","smallestSideLength","min","ceil","rows","columns","flexDirection","Array","from","length","RotatingSquare","_ref2","rotationValue","Value","startRotation","loop","timing","toValue","duration","easing","linear","useNativeDriver","start","interpolatedRotation","interpolate","inputRange","outputRange","backgroundColor","transform","rotate"],"sources":["C:/bachelorarbeit/react_native_test_app/UIView.js"],"sourcesContent":["import NInput from \"./NInput\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {Animated, Easing, View} from \"react-native\";\r\n\r\nexport default function UIView() {\r\n    const [n, setN] = useState();\r\n    let squaresWidth;\r\n    let squaresHeight;\r\n\r\n    const setDimensions = (layout) => {\r\n        const {x, y, width, height} = layout;\r\n        console.log(width, height)\r\n        squaresWidth = width;\r\n        squaresHeight = height;\r\n    }\r\n    const onStart = (n) => {\r\n        setN(n)\r\n    }\r\n    return (\r\n        <View style={{flex: 1, justifyContent: 'center', alignItems: 'center'}} onLayout={(event) => {\r\n            setDimensions(event.nativeEvent.layout)\r\n        }}>\r\n            {n > 0 ? <RotatingSquares n={n} width={squaresWidth} height={squaresHeight}></RotatingSquares> :\r\n                <NInput onStart={onStart}></NInput>}\r\n        </View>\r\n    )\r\n}\r\n\r\nfunction RotatingSquares({n, width, height}) {\r\n    let sizePerSquare = width * height / n;\r\n    let squareSideLength = Math.sqrt(sizePerSquare);\r\n    let smallestSideLength =\r\n        Math.min(height, width);\r\n    if (smallestSideLength > squareSideLength) {\r\n        smallestSideLength =\r\n            smallestSideLength / Math.ceil(smallestSideLength / squareSideLength);\r\n    }\r\n    squareSideLength = smallestSideLength;\r\n    let rows = Math.ceil(height / squareSideLength);\r\n    let columns = Math.ceil(width / squareSideLength);\r\n    console.log(n, width,height)\r\n    return (\r\n        <View style={{flex: 1, justifyContent: \"center\", alignItems: \"center\", width: width, height: height}}>\r\n            <View style={{flex: 1, justifyContent: \"center\", alignItems: \"center\", flexDirection: \"row\"}}>\r\n                {Array.from({length: columns}, () => (\r\n                    <View>\r\n                        {Array.from({length: rows}, () => {\r\n                            if (n > 0) {\r\n                                n--;\r\n                                return (\r\n                                    <RotatingSquare length={squareSideLength}></RotatingSquare>\r\n                                );\r\n                            } else {\r\n                                return (\r\n                                    <View style={{width: squareSideLength, height: squareSideLength}}/>\r\n                                );\r\n                            }\r\n                        })}\r\n                    </View>\r\n                ))}\r\n            </View>\r\n        </View>\r\n    )\r\n}\r\n\r\nfunction RotatingSquare({length}) {\r\n    const rotationValue = new Animated.Value(0);\r\n\r\n    useEffect(() => {\r\n        startRotation();\r\n    }, []);\r\n\r\n    const startRotation = () => {\r\n        Animated.loop(\r\n            Animated.timing(rotationValue, {\r\n                toValue: 1,\r\n                duration: 2000,\r\n                easing: Easing.linear,\r\n                useNativeDriver: true,\r\n            })\r\n        ).start();\r\n    };\r\n\r\n    const interpolatedRotation = rotationValue.interpolate({\r\n        inputRange: [0, 1],\r\n        outputRange: ['0deg', '360deg'],\r\n    });\r\n\r\n    return (\r\n        <View style={{flex: 1, alignItems: 'center', justifyContent: 'center'}}>\r\n            <Animated.View\r\n                style={{\r\n                    width: length,\r\n                    height: length,\r\n                    backgroundColor: 'blue',\r\n                    transform: [{rotate: interpolatedRotation}],\r\n                }}\r\n            />\r\n        </View>\r\n    );\r\n};\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}