{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport NInput from \"./NInput\";\nimport { useState } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function CalculationView() {\n  var fibonacciAlgorithm = function fibonacciAlgorithm(n) {\n    var startTime = performance.now();\n    fib(n);\n    var endTime = performance.now();\n    return elapsedMicroseconds(startTime, endTime);\n  };\n  var fib = function fib(n) {\n    if (n <= 2) {\n      return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n  };\n  var matrixMultiplicationAlgorithm = function matrixMultiplicationAlgorithm(n) {\n    var firstMatrix = Array.from(Array(n), function (v1, row) {\n      return Array.from(new Array(n), function (v2, column) {\n        return (row + 1) * (column + 1);\n      });\n    });\n    var secondMatrix = Array.from(Array(n), function (v1, row) {\n      return Array.from(new Array(n), function (v2, column) {\n        return row + 1 + (column + 1);\n      });\n    });\n    var resultMatrix = Array.from(Array(n), function () {\n      return new Array(n);\n    });\n    var startTime = performance.now();\n    for (var row = 0; row < n; row++) {\n      for (var col = 0; col < n; col++) {\n        var cell = 0;\n        for (var h = 0; h < n; h++) {\n          cell += firstMatrix[row][h] * secondMatrix[h][col];\n        }\n        resultMatrix[row][col] = cell;\n      }\n    }\n    var endTime = performance.now();\n    return elapsedMicroseconds(startTime, endTime);\n  };\n  var binarySearchTreeAlgorithm = function binarySearchTreeAlgorithm(n) {\n    var data = Array.from(Array(n), function (v, i) {\n      return Math.floor((Math.sin(i) - Math.sin(i + 1)) * 1000);\n    });\n    var startTime = performance.now();\n    for (var element of data) {\n      insert(element);\n    }\n    console.log(root);\n    var endTime = performance.now();\n    return elapsedMicroseconds(startTime, endTime);\n  };\n  var root;\n  var insert = function insert(data) {\n    var newNode = {\n      data: data,\n      left: null,\n      right: null\n    };\n    if (root == null) {\n      root = newNode;\n    } else {\n      var current = root;\n      while (current != null) {\n        if (data < current.data) {\n          if (current.left != null) {\n            current = current.left;\n          } else {\n            current.left = newNode;\n            return;\n          }\n        } else {\n          if (current.right != null) {\n            current = current.right;\n          } else {\n            current.right = newNode;\n            return;\n          }\n        }\n      }\n    }\n  };\n  var reverseArrayAlgorithm = function reverseArrayAlgorithm(n) {\n    var startTime = performance.now();\n    fib(n);\n    var endTime = performance.now();\n    return elapsedMicroseconds(startTime, endTime);\n  };\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: [_jsx(CalculationWidget, {\n      name: \"Fib\",\n      algorithmImplementation: fibonacciAlgorithm\n    }), _jsx(CalculationWidget, {\n      name: \"Matrix\",\n      algorithmImplementation: matrixMultiplicationAlgorithm\n    }), _jsx(CalculationWidget, {\n      name: \"Binary\",\n      algorithmImplementation: binarySearchTreeAlgorithm\n    }), _jsx(CalculationWidget, {\n      name: \"Array\",\n      algorithmImplementation: reverseArrayAlgorithm\n    })]\n  });\n}\nfunction CalculationWidget(_ref) {\n  var name = _ref.name,\n    algorithmImplementation = _ref.algorithmImplementation;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    executionTime = _useState2[0],\n    setExecutionTime = _useState2[1];\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    n = _useState4[0],\n    setN = _useState4[1];\n  var onStart = function onStart(n) {\n    setExecutionTime(algorithmImplementation(n));\n    setN(n);\n  };\n  return _jsxs(View, {\n    style: {\n      flexDirection: \"row\",\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: [_jsxs(Text, {\n      style: {\n        width: 50\n      },\n      children: [name, \":\"]\n    }), _jsx(NInput, {\n      onStart: onStart\n    }), _jsx(View, {\n      style: {\n        width: 100\n      },\n      children: executionTime != null && _jsxs(Text, {\n        children: [executionTime, \"\\u03BCs; n = \", n]\n      })\n    })]\n  });\n}\nfunction elapsedMicroseconds(startTime, endTime) {\n  var executionTime = endTime - startTime;\n  return executionTime * 1000;\n}","map":{"version":3,"names":["NInput","useState","Text","View","jsx","_jsx","jsxs","_jsxs","CalculationView","fibonacciAlgorithm","n","startTime","performance","now","fib","endTime","elapsedMicroseconds","matrixMultiplicationAlgorithm","firstMatrix","Array","from","v1","row","v2","column","secondMatrix","resultMatrix","col","cell","h","binarySearchTreeAlgorithm","data","v","i","Math","floor","sin","element","insert","console","log","root","newNode","left","right","current","reverseArrayAlgorithm","style","flex","justifyContent","alignItems","children","CalculationWidget","name","algorithmImplementation","_ref","_useState","_useState2","_slicedToArray","executionTime","setExecutionTime","_useState3","_useState4","setN","onStart","flexDirection","width"],"sources":["C:/bachelorarbeit/react_native_test_app/CalculationView.js"],"sourcesContent":["import NInput from \"./NInput\";\r\nimport {useState} from \"react\";\r\nimport {Text} from \"react-native-web\";\r\nimport {View} from \"react-native\";\r\n\r\nexport default function CalculationView() {\r\n    const fibonacciAlgorithm = (n) => {\r\n        const startTime = performance.now();\r\n        fib(n);\r\n        const endTime = performance.now();\r\n        return elapsedMicroseconds(startTime, endTime);\r\n    }\r\n\r\n    const fib =  (n) => {\r\n        if (n <= 2) {\r\n            return 1;\r\n        }\r\n        return fib(n - 1) + fib(n - 2);\r\n    }\r\n\r\n    const matrixMultiplicationAlgorithm = (n) => {\r\n        const firstMatrix = Array.from(Array(n), (v1,row) => Array.from(new Array(n), (v2, column) => (row + 1) * (column + 1)));\r\n        const secondMatrix = Array.from(Array(n), (v1,row) => Array.from(new Array(n), (v2, column) => (row + 1) + (column + 1)));\r\n        const resultMatrix = Array.from(Array(n), () => new Array(n));\r\n        const startTime = performance.now();\r\n        for (let row = 0; row < n; row++) {\r\n            for (let col = 0; col < n; col++) {\r\n                let cell = 0;\r\n                for (let h = 0; h < n; h++) {\r\n                    cell += firstMatrix[row][h] * secondMatrix[h][col];\r\n                }\r\n                resultMatrix[row][col] = cell;\r\n            }\r\n        }\r\n        const endTime = performance.now();\r\n        return elapsedMicroseconds(startTime, endTime);\r\n    }\r\n\r\n\r\n    const binarySearchTreeAlgorithm = (n) => {\r\n        const data = Array.from(Array(n), (v,i) => Math.floor((Math.sin(i)-Math.sin(i+1)) * 1000));\r\n        const startTime = performance.now();\r\n        for (let element of data) {\r\n            insert(element);\r\n        }\r\n            console.log(root)\r\n        const endTime = performance.now();\r\n        return elapsedMicroseconds(startTime, endTime);\r\n    }\r\n\r\n    let root;\r\n\r\n    const insert = (data) => {\r\n        let newNode = {\r\n            data : data ,\r\n            left : null ,\r\n            right : null\r\n        };\r\n        if(root == null) {\r\n            root = newNode;\r\n        } else {\r\n            let current = root;\r\n            while (current != null) {\r\n                if(data < current.data) {\r\n                    if(current.left != null) {\r\n                        current = current.left;\r\n                    } else {\r\n                        current.left = newNode;\r\n                        return;\r\n                    }\r\n                } else {\r\n                    if(current.right != null) {\r\n                        current = current.right;\r\n                    } else {\r\n                        current.right = newNode;\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const reverseArrayAlgorithm = (n) => {\r\n        const startTime = performance.now();\r\n        fib(n);\r\n        const endTime = performance.now();\r\n        return elapsedMicroseconds(startTime, endTime);\r\n    }\r\n\r\n    return (\r\n        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\r\n            <CalculationWidget name=\"Fib\" algorithmImplementation={fibonacciAlgorithm}></CalculationWidget>\r\n            <CalculationWidget name=\"Matrix\" algorithmImplementation={matrixMultiplicationAlgorithm}></CalculationWidget>\r\n            <CalculationWidget name=\"Binary\" algorithmImplementation={binarySearchTreeAlgorithm}></CalculationWidget>\r\n            <CalculationWidget name=\"Array\" algorithmImplementation={reverseArrayAlgorithm}></CalculationWidget>\r\n        </View>\r\n    )\r\n}\r\n\r\nfunction CalculationWidget({name, algorithmImplementation}) {\r\n    const [executionTime, setExecutionTime] = useState(null);\r\n    const [n, setN] = useState();\r\n    const onStart = (n) => {\r\n        setExecutionTime(algorithmImplementation(n));\r\n        setN(n);\r\n    }\r\n    return (\r\n        <View style={{flexDirection: \"row\", justifyContent: 'center', alignItems: 'center'}}>\r\n            <Text style={{width:50}}>{name}:</Text>\r\n            <NInput onStart={onStart}></NInput>\r\n            <View style={{width:100}}>\r\n                {executionTime != null && <Text >{executionTime}μs; n = {n}</Text>}\r\n            </View>\r\n        </View>\r\n    )\r\n}\r\n\r\nfunction elapsedMicroseconds(startTime, endTime) {\r\n    const executionTime = endTime - startTime;\r\n    return executionTime * 1000;\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}