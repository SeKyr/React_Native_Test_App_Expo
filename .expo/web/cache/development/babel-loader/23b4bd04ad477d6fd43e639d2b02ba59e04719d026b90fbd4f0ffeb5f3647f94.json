{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport NInput from \"./NInput\";\nimport { useEffect, useRef, useState } from \"react\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function UIView() {\n  var _useState = useState(),\n    _useState2 = _slicedToArray(_useState, 2),\n    n = _useState2[0],\n    setN = _useState2[1];\n  var _useState3 = useState(),\n    _useState4 = _slicedToArray(_useState3, 2),\n    squaresWidth = _useState4[0],\n    setSquaresWidth = _useState4[1];\n  var _useState5 = useState(),\n    _useState6 = _slicedToArray(_useState5, 2),\n    squaresHeight = _useState6[0],\n    setSquaresHeight = _useState6[1];\n  var setDimensions = function setDimensions(layout) {\n    var x = layout.x,\n      y = layout.y,\n      width = layout.width,\n      height = layout.height;\n    setSquaresWidth(width);\n    setSquaresHeight(height);\n  };\n  var onStart = function onStart(n) {\n    setN(n);\n  };\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    onLayout: function onLayout(event) {\n      setDimensions(event.nativeEvent.layout);\n    },\n    children: n > 0 ? _jsx(RotatingSquares, {\n      n: n,\n      width: squaresWidth,\n      height: squaresHeight\n    }) : _jsx(NInput, {\n      onStart: onStart\n    })\n  });\n}\nfunction getOptimalSideLength(n, width, height) {\n  var sizePerSquare = width * height / n;\n  var squareSideLength = Math.sqrt(sizePerSquare);\n  var smallerSideLength = Math.min(height, width);\n  var biggerSideLength = Math.max(height, width);\n  if (squareSideLength <= smallerSideLength && squareSideLength <= biggerSideLength / n) {\n    return squareSideLength;\n  }\n  var rows = 1;\n  var smallerSideCellLength = 0;\n  var biggerSideCellLength = 0;\n  var nextSmallerSideCellLength = 0;\n  while (biggerSideCellLength <= nextSmallerSideCellLength) {\n    smallerSideCellLength = smallerSideLength / rows;\n    biggerSideCellLength = biggerSideLength / Math.ceil(n / rows);\n    nextSmallerSideCellLength = smallerSideLength / (rows + 1);\n    rows++;\n  }\n  return Math.min(smallerSideCellLength, biggerSideCellLength);\n}\nfunction RotatingSquares(_ref) {\n  var n = _ref.n,\n    width = _ref.width,\n    height = _ref.height;\n  var squareSideLength = getOptimalSideLength(n, width, height);\n  var rows = Math.floor(height / squareSideLength);\n  var columns = Math.floor(width / squareSideLength);\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      width: width,\n      height: height\n    },\n    children: _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexDirection: \"row\"\n      },\n      children: Array.from({\n        length: columns\n      }, function (_, column) {\n        return _jsx(View, {\n          children: Array.from({\n            length: rows\n          }, function (_, row) {\n            if (n > 0) {\n              n--;\n              return _jsx(RotatingSquare, {\n                length: squareSideLength\n              }, row);\n            }\n          })\n        }, column);\n      })\n    })\n  });\n}\nfunction RotatingSquare(_ref2) {\n  var length = _ref2.length;\n  var rotationValue = useRef(new Animated.Value(0)).current;\n  useEffect(function () {\n    var startAnimation = function startAnimation() {\n      rotationValue.setValue(0);\n      Animated.timing(rotationValue, {\n        toValue: 1,\n        duration: 2000,\n        easing: Easing.linear,\n        useNativeDriver: true\n      }).start(startAnimation);\n    };\n    startAnimation();\n  }, [rotationValue]);\n  var interpolatedRotation = rotationValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '360deg']\n  });\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    children: _jsx(Animated.View, {\n      style: {\n        width: length,\n        height: length,\n        backgroundColor: '#2196F3FF',\n        borderWidth: 1,\n        borderColor: \"black\",\n        transform: [{\n          rotate: interpolatedRotation\n        }]\n      }\n    })\n  });\n}","map":{"version":3,"names":["NInput","useEffect","useRef","useState","Animated","Easing","View","jsx","_jsx","UIView","_useState","_useState2","_slicedToArray","n","setN","_useState3","_useState4","squaresWidth","setSquaresWidth","_useState5","_useState6","squaresHeight","setSquaresHeight","setDimensions","layout","x","y","width","height","onStart","style","flex","justifyContent","alignItems","onLayout","event","nativeEvent","children","RotatingSquares","getOptimalSideLength","sizePerSquare","squareSideLength","Math","sqrt","smallerSideLength","min","biggerSideLength","max","rows","smallerSideCellLength","biggerSideCellLength","nextSmallerSideCellLength","ceil","_ref","floor","columns","flexDirection","Array","from","length","_","column","row","RotatingSquare","_ref2","rotationValue","Value","current","startAnimation","setValue","timing","toValue","duration","easing","linear","useNativeDriver","start","interpolatedRotation","interpolate","inputRange","outputRange","backgroundColor","borderWidth","borderColor","transform","rotate"],"sources":["C:/bachelorarbeit/react_native_test_app/UIView.js"],"sourcesContent":["import NInput from \"./NInput\";\r\nimport {useEffect, useRef, useState} from \"react\";\r\nimport {Animated, Easing, View} from \"react-native\";\r\n\r\nexport default function UIView() {\r\n    const [n, setN] = useState();\r\n    const [squaresWidth, setSquaresWidth] = useState();\r\n    const [squaresHeight, setSquaresHeight] = useState();\r\n\r\n    const setDimensions = (layout) => {\r\n        const {x, y, width, height} = layout;\r\n        setSquaresWidth(width);\r\n        setSquaresHeight(height);\r\n    }\r\n    const onStart = (n) => {\r\n        setN(n)\r\n    }\r\n    return (\r\n        <View style={{flex: 1, justifyContent: 'center', alignItems: 'center'}} onLayout={(event) => {\r\n            setDimensions(event.nativeEvent.layout)\r\n        }}>\r\n            {n > 0 ? <RotatingSquares n={n} width={squaresWidth} height={squaresHeight}></RotatingSquares> :\r\n                <NInput onStart={onStart}></NInput>}\r\n        </View>\r\n    )\r\n}\r\n\r\n\r\nfunction getOptimalSideLength(n, width, height) {\r\n    let sizePerSquare = width * height / n;\r\n    let squareSideLength = Math.sqrt(sizePerSquare);\r\n    let smallerSideLength = Math.min(height, width);\r\n    let biggerSideLength = Math.max(height, width);\r\n    if (squareSideLength <= smallerSideLength && squareSideLength <= biggerSideLength / n) {\r\n        return squareSideLength;\r\n    }\r\n    let rows = 1;\r\n    let smallerSideCellLength = 0;\r\n    let biggerSideCellLength = 0;\r\n    let nextSmallerSideCellLength = 0;\r\n    while (biggerSideCellLength <= nextSmallerSideCellLength) {\r\n        smallerSideCellLength = smallerSideLength/rows;\r\n        biggerSideCellLength = biggerSideLength/ Math.ceil(n / rows);\r\n        nextSmallerSideCellLength = smallerSideLength / (rows + 1);\r\n        rows++;\r\n    }\r\n    return Math.min(smallerSideCellLength, biggerSideCellLength);\r\n}\r\n\r\nfunction RotatingSquares({n, width, height}) {\r\n    let squareSideLength = getOptimalSideLength(n, width, height);\r\n    let rows = Math.floor(height / squareSideLength);\r\n    let columns = Math.floor(width / squareSideLength);\r\n    return (\r\n        <View style={{flex: 1, justifyContent: \"center\", alignItems: \"center\", width: width, height: height}}>\r\n            <View style={{flex: 1, justifyContent: \"center\", alignItems: \"center\", flexDirection: \"row\"}}>\r\n                {Array.from({length: columns}, (_, column) => (\r\n                    <View key={column}>\r\n                        {Array.from({length: rows}, (_, row) => {\r\n                            if (n > 0) {\r\n                                n--;\r\n                                return (\r\n                                    <RotatingSquare key={row} length={squareSideLength}></RotatingSquare>\r\n                                );\r\n                            }\r\n                        })}\r\n                    </View>\r\n                ))}\r\n            </View>\r\n        </View>\r\n    )\r\n}\r\n\r\nfunction RotatingSquare({length}) {\r\n    const rotationValue = useRef(new Animated.Value(0)).current;\r\n\r\n    useEffect(() => {\r\n        const startAnimation = () => {\r\n            rotationValue.setValue(0);\r\n\r\n            Animated.timing(rotationValue, {\r\n                toValue: 1,\r\n                duration: 2000,\r\n                easing: Easing.linear,\r\n                useNativeDriver: true,\r\n            }).start(startAnimation);\r\n        };\r\n\r\n        startAnimation();\r\n    }, [rotationValue]);\r\n\r\n    const interpolatedRotation = rotationValue.interpolate({\r\n        inputRange: [0, 1],\r\n        outputRange: ['0deg', '360deg'],\r\n    });\r\n\r\n    return (\r\n        <View style={{flex: 1, alignItems: 'center', justifyContent: 'center'}}>\r\n            <Animated.View\r\n                style={{\r\n                    width: length,\r\n                    height: length,\r\n                    backgroundColor: '#2196F3FF',\r\n                    borderWidth: 1,\r\n                    borderColor: \"black\",\r\n                    transform: [{rotate: interpolatedRotation}],\r\n                }}\r\n            />\r\n        </View>\r\n    );\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}